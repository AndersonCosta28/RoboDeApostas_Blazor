// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RoboDeApostas.Models.CasasDeAposta.BetanoAPI.DetalheDaPartida;
//
//    var responseDetalheDaPartida = DetalheDaPartida.FromJson(jsonString);

namespace RoboDeApostas.Models.CasasDeAposta.BetanoAPI.DetalheDaPartida
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ResponseDetalheDaPartida
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public ResponseDetalheDaPartidaData Data { get; set; }

        [JsonProperty("structureComponents", NullValueHandling = NullValueHandling.Ignore)]
        public StructureComponents StructureComponents { get; set; }

        [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; }

        [JsonProperty("companyId", NullValueHandling = NullValueHandling.Ignore)]
        public long? CompanyId { get; set; }
    }

    public partial class ResponseDetalheDaPartidaData
    {
        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public DataEvent Event { get; set; }

        [JsonProperty("hasStarted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasStarted { get; set; }

        [JsonProperty("breadcrumb", NullValueHandling = NullValueHandling.Ignore)]
        public List<Breadcrumb> Breadcrumb { get; set; }

        [JsonProperty("metaData", NullValueHandling = NullValueHandling.Ignore)]
        public MetaData MetaData { get; set; }
    }

    public partial class Breadcrumb
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }
    }

    public partial class DataEvent
    {
        [JsonProperty("sportId", NullValueHandling = NullValueHandling.Ignore)]
        public string SportId { get; set; }

        [JsonProperty("shortName", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName { get; set; }

        [JsonProperty("totalMarketsAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalMarketsAvailable { get; set; }

        [JsonProperty("hasMatchCombo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasMatchCombo { get; set; }

        [JsonProperty("matchComboUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string MatchComboUrl { get; set; }

        // [JsonProperty("betRadarId", NullValueHandling = NullValueHandling.Ignore)]
        // public long? BetRadarId { get; set; }

        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [JsonProperty("tvChannel", NullValueHandling = NullValueHandling.Ignore)]
        public string TvChannel { get; set; }

        [JsonProperty("regionName", NullValueHandling = NullValueHandling.Ignore)]
        public string RegionName { get; set; }

        // [JsonProperty("regionId", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? RegionId { get; set; }

        [JsonProperty("leagueDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string LeagueDescription { get; set; }

        // [JsonProperty("leagueId", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? LeagueId { get; set; }

        [JsonProperty("streamOverlayMarketIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StreamOverlayMarketIds { get; set; }

        [JsonProperty("matchComboMarketTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> MatchComboMarketTypes { get; set; }

        [JsonProperty("availableStatTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> AvailableStatTypes { get; set; }

        [JsonProperty("sixPackBlocks", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> SixPackBlocks { get; set; }

        [JsonProperty("homeTeamColor", NullValueHandling = NullValueHandling.Ignore)]
        public string HomeTeamColor { get; set; }

        [JsonProperty("awayTeamColor", NullValueHandling = NullValueHandling.Ignore)]
        public string AwayTeamColor { get; set; }

        [JsonProperty("incidents", NullValueHandling = NullValueHandling.Ignore)]
        public List<Incident> Incidents { get; set; }

        [JsonProperty("selectionsVisible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SelectionsVisible { get; set; }

        [JsonProperty("liveData", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleLiveData LiveData { get; set; }

        [JsonProperty("chatChannelId", NullValueHandling = NullValueHandling.Ignore)]
        public string ChatChannelId { get; set; }

        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("liveNow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? LiveNow { get; set; }

        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? StartTime { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleMarket> Markets { get; set; }

        [JsonProperty("participants", NullValueHandling = NullValueHandling.Ignore)]
        public List<Participant> Participants { get; set; }
    }

    public partial class Incident
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("injuryMinutes", NullValueHandling = NullValueHandling.Ignore)]
        public long? InjuryMinutes { get; set; }

        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class PurpleLiveData
    {
        [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
        public Score Score { get; set; }

        [JsonProperty("clock", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleClock Clock { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleResults Results { get; set; }

        [JsonProperty("periodDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string PeriodDescription { get; set; }
    }

    public partial class PurpleClock
    {
        [JsonProperty("secondsSinceStart", NullValueHandling = NullValueHandling.Ignore)]
        public long? SecondsSinceStart { get; set; }
    }

    public partial class PurpleResults
    {
        [JsonProperty("goal", NullValueHandling = NullValueHandling.Ignore)]
        public Score Goal { get; set; }

        [JsonProperty("expectedGoal", NullValueHandling = NullValueHandling.Ignore)]
        public Score ExpectedGoal { get; set; }

        [JsonProperty("standardTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score StandardTimeScore { get; set; }

        [JsonProperty("extraTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score ExtraTimeScore { get; set; }

        [JsonProperty("shootoutScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score ShootoutScore { get; set; }

        [JsonProperty("penaltyShootout", NullValueHandling = NullValueHandling.Ignore)]
        public PenaltyShootout PenaltyShootout { get; set; }

        [JsonProperty("penalties", NullValueHandling = NullValueHandling.Ignore)]
        public Score Penalties { get; set; }

        [JsonProperty("yellow", NullValueHandling = NullValueHandling.Ignore)]
        public Score Yellow { get; set; }

        [JsonProperty("corners", NullValueHandling = NullValueHandling.Ignore)]
        public Score Corners { get; set; }

        [JsonProperty("shots", NullValueHandling = NullValueHandling.Ignore)]
        public Score Shots { get; set; }

        [JsonProperty("scorers", NullValueHandling = NullValueHandling.Ignore)]
        public List<Scorer> Scorers { get; set; }

        [JsonProperty("injuryTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? InjuryTime { get; set; }
    }

    public partial class Score
    {
        [JsonProperty("home", NullValueHandling = NullValueHandling.Ignore)]
        public AwayUnion? Home { get; set; }

        [JsonProperty("away", NullValueHandling = NullValueHandling.Ignore)]
        public AwayUnion? Away { get; set; }
    }

    public partial class PenaltyShootout
    {
        [JsonProperty("home", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Home { get; set; }

        [JsonProperty("away", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Away { get; set; }
    }

    public partial class Scorer
    {
        [JsonProperty("goalsDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string GoalsDescription { get; set; }

        [JsonProperty("homeAway", NullValueHandling = NullValueHandling.Ignore)]
        public HomeAway? HomeAway { get; set; }
    }

    public partial class PurpleMarket
    {
        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("handicap", NullValueHandling = NullValueHandling.Ignore)]
        public double? Handicap { get; set; }

        [JsonProperty("marketCloseTimeMillis", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketCloseTimeMillis { get; set; }

        [JsonProperty("renderingLayout", NullValueHandling = NullValueHandling.Ignore)]
        public long? RenderingLayout { get; set; }

        [JsonProperty("pinKey", NullValueHandling = NullValueHandling.Ignore)]
        public string PinKey { get; set; }

        [JsonProperty("selections", NullValueHandling = NullValueHandling.Ignore)]
        public List<Selection> Selections { get; set; }

        [JsonProperty("scorerSelections", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ScorerSelections { get; set; }

        [JsonProperty("exactScoreSelections", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ExactScoreSelections { get; set; }
    }

    public partial class Selection
    {
        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // public string Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("handicap", NullValueHandling = NullValueHandling.Ignore)]
        public double? Handicap { get; set; }

        [JsonProperty("betRef", NullValueHandling = NullValueHandling.Ignore)]
        public string BetRef { get; set; }

        [JsonProperty("renderingLayout", NullValueHandling = NullValueHandling.Ignore)]
        public long? RenderingLayout { get; set; }

        [JsonProperty("columnIndex", NullValueHandling = NullValueHandling.Ignore)]
        public long? ColumnIndex { get; set; }

        [JsonProperty("suspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Suspended { get; set; }

        [JsonProperty("fullName", NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }
    }

    public partial class Participant
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class MetaData
    {
        [JsonProperty("pageTitle", NullValueHandling = NullValueHandling.Ignore)]
        public string PageTitle { get; set; }
    }

    public partial class StructureComponents
    {
        [JsonProperty("topNotification", NullValueHandling = NullValueHandling.Ignore)]
        public TopNotification TopNotification { get; set; }

        [JsonProperty("panicButton", NullValueHandling = NullValueHandling.Ignore)]
        public PanicButton PanicButton { get; set; }

        [JsonProperty("live", NullValueHandling = NullValueHandling.Ignore)]
        public Live Live { get; set; }

        [JsonProperty("marketingBannersLive", NullValueHandling = NullValueHandling.Ignore)]
        public MarketingBannersLive MarketingBannersLive { get; set; }

        [JsonProperty("tabs", NullValueHandling = NullValueHandling.Ignore)]
        public Tabs Tabs { get; set; }
    }

    public partial class Live
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("sportId", NullValueHandling = NullValueHandling.Ignore)]
        public string SportId { get; set; }

        [JsonProperty("sportName", NullValueHandling = NullValueHandling.Ignore)]
        public string SportName { get; set; }

        [JsonProperty("sportNameNormalCase", NullValueHandling = NullValueHandling.Ignore)]
        public string SportNameNormalCase { get; set; }

        [JsonProperty("events", NullValueHandling = NullValueHandling.Ignore)]
        public List<EventElement> Events { get; set; }

        [JsonProperty("totalEvents", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalEvents { get; set; }

        [JsonProperty("liveOverviewMarkets", NullValueHandling = NullValueHandling.Ignore)]
        public List<LiveOverviewMarket> LiveOverviewMarkets { get; set; }

        [JsonProperty("streamingAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StreamingAvailable { get; set; }
    }

    public partial class EventElement
    {
        [JsonProperty("stats", NullValueHandling = NullValueHandling.Ignore)]
        public List<Stat> Stats { get; set; }

        [JsonProperty("sportId", NullValueHandling = NullValueHandling.Ignore)]
        public string SportId { get; set; }

        [JsonProperty("shortName", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName { get; set; }

        [JsonProperty("totalMarketsAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalMarketsAvailable { get; set; }

        // [JsonProperty("betRadarId", NullValueHandling = NullValueHandling.Ignore)]
        // public long? BetRadarId { get; set; }

        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public Notes? Notes { get; set; }

        [JsonProperty("tvChannel", NullValueHandling = NullValueHandling.Ignore)]
        public string TvChannel { get; set; }

        [JsonProperty("outrightEvent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OutrightEvent { get; set; }

        [JsonProperty("regionName", NullValueHandling = NullValueHandling.Ignore)]
        public string RegionName { get; set; }

        // [JsonProperty("regionId", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? RegionId { get; set; }

        [JsonProperty("regionCode", NullValueHandling = NullValueHandling.Ignore)]
        public string RegionCode { get; set; }

        [JsonProperty("leagueDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string LeagueDescription { get; set; }

        // [JsonProperty("leagueId", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? LeagueId { get; set; }

        [JsonProperty("streamOverlayMarketIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StreamOverlayMarketIds { get; set; }

        [JsonProperty("availableStatTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> AvailableStatTypes { get; set; }

        [JsonProperty("liveData", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyLiveData LiveData { get; set; }

        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("liveNow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? LiveNow { get; set; }

        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? StartTime { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyMarket> Markets { get; set; }

        [JsonProperty("participants", NullValueHandling = NullValueHandling.Ignore)]
        public List<Participant> Participants { get; set; }

        [JsonProperty("suspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Suspended { get; set; }

        [JsonProperty("streamingAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StreamingAvailable { get; set; }
    }

    public partial class FluffyLiveData
    {
        [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
        public Score Score { get; set; }

        [JsonProperty("clock", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyClock Clock { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyResults Results { get; set; }

        [JsonProperty("periodDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string PeriodDescription { get; set; }
    }

    public partial class FluffyClock
    {
        [JsonProperty("secondsSinceStart", NullValueHandling = NullValueHandling.Ignore)]
        public long? SecondsSinceStart { get; set; }

        [JsonProperty("clockStopped", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ClockStopped { get; set; }
    }

    public partial class FluffyResults
    {
        [JsonProperty("goal", NullValueHandling = NullValueHandling.Ignore)]
        public Score Goal { get; set; }

        [JsonProperty("standardTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score StandardTimeScore { get; set; }

        [JsonProperty("extraTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score ExtraTimeScore { get; set; }

        [JsonProperty("shootoutScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score ShootoutScore { get; set; }

        [JsonProperty("penaltyShootout", NullValueHandling = NullValueHandling.Ignore)]
        public PenaltyShootout PenaltyShootout { get; set; }

        [JsonProperty("penalties", NullValueHandling = NullValueHandling.Ignore)]
        public Score Penalties { get; set; }

        [JsonProperty("yellow", NullValueHandling = NullValueHandling.Ignore)]
        public Score Yellow { get; set; }

        [JsonProperty("corners", NullValueHandling = NullValueHandling.Ignore)]
        public Score Corners { get; set; }

        [JsonProperty("injuryTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? InjuryTime { get; set; }

        [JsonProperty("shots", NullValueHandling = NullValueHandling.Ignore)]
        public Score Shots { get; set; }

        [JsonProperty("scorers", NullValueHandling = NullValueHandling.Ignore)]
        public List<Scorer> Scorers { get; set; }

        [JsonProperty("red", NullValueHandling = NullValueHandling.Ignore)]
        public Score Red { get; set; }

        [JsonProperty("regularPeriods", NullValueHandling = NullValueHandling.Ignore)]
        public long? RegularPeriods { get; set; }

        [JsonProperty("currentPeriod", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentPeriod { get; set; }

        [JsonProperty("firstPeriodScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score FirstPeriodScore { get; set; }

        [JsonProperty("secondPeriodScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score SecondPeriodScore { get; set; }

        [JsonProperty("halfTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score HalfTimeScore { get; set; }

        [JsonProperty("fullTimeScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score FullTimeScore { get; set; }

        [JsonProperty("extraPeriodScores", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ExtraPeriodScores { get; set; }

        [JsonProperty("maxSetsToPlay", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxSetsToPlay { get; set; }

        [JsonProperty("homeSetsScore", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> HomeSetsScore { get; set; }

        [JsonProperty("awaySetsScore", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AwaySetsScore { get; set; }

        [JsonProperty("serverHome", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerHome { get; set; }

        [JsonProperty("currentScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score CurrentScore { get; set; }

        [JsonProperty("currentSetNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentSetNumber { get; set; }

        [JsonProperty("currentGame", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentGame { get; set; }

        [JsonProperty("totalHomeGamesWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalHomeGamesWon { get; set; }

        [JsonProperty("totalAwayGamesWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalAwayGamesWon { get; set; }

        [JsonProperty("currentSetHomeGamesWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentSetHomeGamesWon { get; set; }

        [JsonProperty("currentSetAwayGamesWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentSetAwayGamesWon { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Status { get; set; }

        [JsonProperty("serverAway", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ServerAway { get; set; }

        [JsonProperty("homeSetsWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? HomeSetsWon { get; set; }

        [JsonProperty("awaySetsWon", NullValueHandling = NullValueHandling.Ignore)]
        public long? AwaySetsWon { get; set; }

        [JsonProperty("totalHomePoints", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalHomePoints { get; set; }

        [JsonProperty("totalAwayPoints", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalAwayPoints { get; set; }

        [JsonProperty("periodScores", NullValueHandling = NullValueHandling.Ignore)]
        public List<Score> PeriodScores { get; set; }

        [JsonProperty("clockHidden", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ClockHidden { get; set; }

        [JsonProperty("bases", NullValueHandling = NullValueHandling.Ignore)]
        public List<bool> Bases { get; set; }

        [JsonProperty("balls", NullValueHandling = NullValueHandling.Ignore)]
        public long? Balls { get; set; }

        [JsonProperty("strikes", NullValueHandling = NullValueHandling.Ignore)]
        public long? Strikes { get; set; }

        [JsonProperty("runners", NullValueHandling = NullValueHandling.Ignore)]
        public string Runners { get; set; }

        [JsonProperty("outs", NullValueHandling = NullValueHandling.Ignore)]
        public long? Outs { get; set; }

        [JsonProperty("innings", NullValueHandling = NullValueHandling.Ignore)]
        public List<Score> Innings { get; set; }

        [JsonProperty("act", NullValueHandling = NullValueHandling.Ignore)]
        public Score Act { get; set; }

        [JsonProperty("firstHalfScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score FirstHalfScore { get; set; }

        [JsonProperty("secondHalfScore", NullValueHandling = NullValueHandling.Ignore)]
        public Score SecondHalfScore { get; set; }
    }

    public partial class FluffyMarket
    {
        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Name? Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("handicap", NullValueHandling = NullValueHandling.Ignore)]
        public double? Handicap { get; set; }

        [JsonProperty("marketCloseTimeMillis", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketCloseTimeMillis { get; set; }

        [JsonProperty("renderingLayout", NullValueHandling = NullValueHandling.Ignore)]
        public long? RenderingLayout { get; set; }

        [JsonProperty("selections", NullValueHandling = NullValueHandling.Ignore)]
        public List<Selection> Selections { get; set; }

        [JsonProperty("scorerSelections", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ScorerSelections { get; set; }

        [JsonProperty("exactScoreSelections", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ExactScoreSelections { get; set; }

        [JsonProperty("expanded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Expanded { get; set; }

        [JsonProperty("suspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Suspended { get; set; }
    }

    public partial class Stat
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("providerId", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProviderId { get; set; }
    }

    public partial class LiveOverviewMarket
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class MarketingBannersLive
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public MarketingBannersLiveData Data { get; set; }
    }

    public partial class MarketingBannersLiveData
    {
        [JsonProperty("liveAnonymousBanners", NullValueHandling = NullValueHandling.Ignore)]
        public List<LiveBanner> LiveAnonymousBanners { get; set; }

        [JsonProperty("liveLoggedInBanners", NullValueHandling = NullValueHandling.Ignore)]
        public List<LiveBanner> LiveLoggedInBanners { get; set; }

        [JsonProperty("casinoGames", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> CasinoGames { get; set; }
    }

    public partial class LiveBanner
    {
        // [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        // [JsonConverter(typeof(ParseStringConverter))]
        // public long? Id { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("navigationAction", NullValueHandling = NullValueHandling.Ignore)]
        public long? NavigationAction { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("lead", NullValueHandling = NullValueHandling.Ignore)]
        public string Lead { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Image { get; set; }
    }

    public partial class PanicButton
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public PanicButtonData Data { get; set; }

        [JsonProperty("errors", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Errors { get; set; }
    }

    public partial class PanicButtonData
    {
        [JsonProperty("currentDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CurrentDateTime { get; set; }

        [JsonProperty("customerExclusionUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerExclusionUrl { get; set; }

        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public long? ErrorCode { get; set; }

        [JsonProperty("isDataSuccess", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDataSuccess { get; set; }
    }

    public partial class Tabs
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public TabsData Data { get; set; }
    }

    public partial class TabsData
    {
        [JsonProperty("foot", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Foot { get; set; }

        [JsonProperty("bask", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Bask { get; set; }

        [JsonProperty("tenn", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Tenn { get; set; }

        [JsonProperty("badm", NullValueHandling = NullValueHandling.Ignore)]
        public List<Badm> Badm { get; set; }

        [JsonProperty("esps", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Esps { get; set; }

        [JsonProperty("voll", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Voll { get; set; }

        [JsonProperty("hand", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Hand { get; set; }

        [JsonProperty("base", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Base { get; set; }

        [JsonProperty("amfo", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Amfo { get; set; }

        [JsonProperty("iceh", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Iceh { get; set; }

        [JsonProperty("dart", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Dart { get; set; }

        [JsonProperty("snoo", NullValueHandling = NullValueHandling.Ignore)]
        public List<Amfo> Snoo { get; set; }
    }

    public partial class Amfo
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("allMarkets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllMarkets { get; set; }

        [JsonProperty("markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Markets { get; set; }

        [JsonProperty("hideIfUnavailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideIfUnavailable { get; set; }
    }

    public partial class Badm
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("hideIfUnavailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideIfUnavailable { get; set; }

        [JsonProperty("markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Markets { get; set; }
    }

    public partial class TopNotification
    {
    }

    public partial class User
    {
        [JsonProperty("birthYear", NullValueHandling = NullValueHandling.Ignore)]
        public long? BirthYear { get; set; }
    }

    public enum AwayEnum { A, Away, Batting, Empty, Pitching, The083, The183 };

    public enum HomeAway { Away, Home };

    public enum Name { ResultadoFinal, TotalDeGolsMaisMenos, TotalDeGolsTempoRegular, Vencedor, VencedorDoJogo, VencedorFinal };

    public enum TypeEnum { Cmpw, H2Ht, Hctg, Hhtt, Htoh, Mres };

    public enum Notes { Empty, PrimeiroJogo00, Semifinal };

    public partial struct AwayUnion
    {
        public AwayEnum? Enum;
        public long? Integer;

        public static implicit operator AwayUnion(AwayEnum Enum) => new AwayUnion { Enum = Enum };
        public static implicit operator AwayUnion(long Integer) => new AwayUnion { Integer = Integer };
    }

    public partial class ResponseDetalheDaPartida
    {
        public static ResponseDetalheDaPartida FromJson(string json) => JsonConvert.DeserializeObject<ResponseDetalheDaPartida>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ResponseDetalheDaPartida self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AwayUnionConverter.Singleton,
                AwayEnumConverter.Singleton,
                HomeAwayConverter.Singleton,
                NameConverter.Singleton,
                TypeEnumConverter.Singleton,
                NotesConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class AwayUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AwayUnion) || t == typeof(AwayUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new AwayUnion { Enum = AwayEnum.Away };
                        case "-":
                            return new AwayUnion { Enum = AwayEnum.Empty };
                        case "0.83":
                            return new AwayUnion { Enum = AwayEnum.The083 };
                        case "1.83":
                            return new AwayUnion { Enum = AwayEnum.The183 };
                        case "A":
                            return new AwayUnion { Enum = AwayEnum.A };
                        case "batting":
                            return new AwayUnion { Enum = AwayEnum.Batting };
                        case "pitching":
                            return new AwayUnion { Enum = AwayEnum.Pitching };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new AwayUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type AwayUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AwayUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case AwayEnum.Away:
                        serializer.Serialize(writer, "");
                        return;
                    case AwayEnum.Empty:
                        serializer.Serialize(writer, "-");
                        return;
                    case AwayEnum.The083:
                        serializer.Serialize(writer, "0.83");
                        return;
                    case AwayEnum.The183:
                        serializer.Serialize(writer, "1.83");
                        return;
                    case AwayEnum.A:
                        serializer.Serialize(writer, "A");
                        return;
                    case AwayEnum.Batting:
                        serializer.Serialize(writer, "batting");
                        return;
                    case AwayEnum.Pitching:
                        serializer.Serialize(writer, "pitching");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type AwayUnion");
        }

        public static readonly AwayUnionConverter Singleton = new AwayUnionConverter();
    }

    internal class AwayEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AwayEnum) || t == typeof(AwayEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return AwayEnum.Away;
                case "-":
                    return AwayEnum.Empty;
                case "0.83":
                    return AwayEnum.The083;
                case "1.83":
                    return AwayEnum.The183;
                case "A":
                    return AwayEnum.A;
                case "batting":
                    return AwayEnum.Batting;
                case "pitching":
                    return AwayEnum.Pitching;
            }
            throw new Exception("Cannot unmarshal type AwayEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AwayEnum)untypedValue;
            switch (value)
            {
                case AwayEnum.Away:
                    serializer.Serialize(writer, "");
                    return;
                case AwayEnum.Empty:
                    serializer.Serialize(writer, "-");
                    return;
                case AwayEnum.The083:
                    serializer.Serialize(writer, "0.83");
                    return;
                case AwayEnum.The183:
                    serializer.Serialize(writer, "1.83");
                    return;
                case AwayEnum.A:
                    serializer.Serialize(writer, "A");
                    return;
                case AwayEnum.Batting:
                    serializer.Serialize(writer, "batting");
                    return;
                case AwayEnum.Pitching:
                    serializer.Serialize(writer, "pitching");
                    return;
            }
            throw new Exception("Cannot marshal type AwayEnum");
        }

        public static readonly AwayEnumConverter Singleton = new AwayEnumConverter();
    }

    internal class HomeAwayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HomeAway) || t == typeof(HomeAway?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "away":
                    return HomeAway.Away;
                case "home":
                    return HomeAway.Home;
            }
            throw new Exception("Cannot unmarshal type HomeAway");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HomeAway)untypedValue;
            switch (value)
            {
                case HomeAway.Away:
                    serializer.Serialize(writer, "away");
                    return;
                case HomeAway.Home:
                    serializer.Serialize(writer, "home");
                    return;
            }
            throw new Exception("Cannot marshal type HomeAway");
        }

        public static readonly HomeAwayConverter Singleton = new HomeAwayConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Resultado Final":
                    return Name.ResultadoFinal;
                case "Total de Gols Mais/Menos":
                    return Name.TotalDeGolsMaisMenos;
                case "Total de gols (Tempo regular)":
                    return Name.TotalDeGolsTempoRegular;
                case "Vencedor":
                    return Name.Vencedor;
                case "Vencedor Final":
                    return Name.VencedorFinal;
                case "Vencedor do jogo":
                    return Name.VencedorDoJogo;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.ResultadoFinal:
                    serializer.Serialize(writer, "Resultado Final");
                    return;
                case Name.TotalDeGolsMaisMenos:
                    serializer.Serialize(writer, "Total de Gols Mais/Menos");
                    return;
                case Name.TotalDeGolsTempoRegular:
                    serializer.Serialize(writer, "Total de gols (Tempo regular)");
                    return;
                case Name.Vencedor:
                    serializer.Serialize(writer, "Vencedor");
                    return;
                case Name.VencedorFinal:
                    serializer.Serialize(writer, "Vencedor Final");
                    return;
                case Name.VencedorDoJogo:
                    serializer.Serialize(writer, "Vencedor do jogo");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CMPW":
                    return TypeEnum.Cmpw;
                case "H2HT":
                    return TypeEnum.H2Ht;
                case "HCTG":
                    return TypeEnum.Hctg;
                case "HHTT":
                    return TypeEnum.Hhtt;
                case "HTOH":
                    return TypeEnum.Htoh;
                case "MRES":
                    return TypeEnum.Mres;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Cmpw:
                    serializer.Serialize(writer, "CMPW");
                    return;
                case TypeEnum.H2Ht:
                    serializer.Serialize(writer, "H2HT");
                    return;
                case TypeEnum.Hctg:
                    serializer.Serialize(writer, "HCTG");
                    return;
                case TypeEnum.Hhtt:
                    serializer.Serialize(writer, "HHTT");
                    return;
                case TypeEnum.Htoh:
                    serializer.Serialize(writer, "HTOH");
                    return;
                case TypeEnum.Mres:
                    serializer.Serialize(writer, "MRES");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class NotesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Notes) || t == typeof(Notes?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Notes.Empty;
                case "Primeiro jogo: 0-0":
                    return Notes.PrimeiroJogo00;
                case "Semifinal":
                    return Notes.Semifinal;
            }
            throw new Exception("Cannot unmarshal type Notes");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Notes)untypedValue;
            switch (value)
            {
                case Notes.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Notes.PrimeiroJogo00:
                    serializer.Serialize(writer, "Primeiro jogo: 0-0");
                    return;
                case Notes.Semifinal:
                    serializer.Serialize(writer, "Semifinal");
                    return;
            }
            throw new Exception("Cannot marshal type Notes");
        }

        public static readonly NotesConverter Singleton = new NotesConverter();
    }
}
