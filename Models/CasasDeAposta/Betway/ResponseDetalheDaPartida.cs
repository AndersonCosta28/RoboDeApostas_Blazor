// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RoboDeApostas.Models.CasasDeAposta.BetwayAPI.DetalheDaPartida;
//
//    var responseDetalheDaPartida = DetalheDaPartida.FromJson(jsonString);

namespace RoboDeApostas.Models.CasasDeAposta.BetwayAPI.DetalheDaPartida
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ResponseDetalheDaPartida
    {
        [JsonProperty("Event", NullValueHandling = NullValueHandling.Ignore)]
        public Event Event { get; set; }

        [JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
        public Category Category { get; set; }

        [JsonProperty("Markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<Market> Markets { get; set; }

        [JsonProperty("Outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Outcome> Outcomes { get; set; }

        [JsonProperty("Content", NullValueHandling = NullValueHandling.Ignore)]
        public Content Content { get; set; }

        [JsonProperty("MethodName", NullValueHandling = NullValueHandling.Ignore)]
        public string MethodName { get; set; }

        [JsonProperty("MethodResult", NullValueHandling = NullValueHandling.Ignore)]
        public string MethodResult { get; set; }

        [JsonProperty("Success", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [JsonProperty("CorrelationId", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? CorrelationId { get; set; }
    }

    public partial class Category
    {
        //[JsonProperty("CategoryCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string CategoryCName { get; set; }

        [JsonProperty("UpcomingEvents", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> UpcomingEvents { get; set; }

        [JsonProperty("LiveEvents")]
        public object LiveEvents { get; set; }

        [JsonProperty("FutureEvents")]
        public object FutureEvents { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("OrderedScoreboardGizmoIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> OrderedScoreboardGizmoIds { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        //[JsonProperty("GroupName", NullValueHandling = NullValueHandling.Ignore)]
        //public string GroupName { get; set; }

        [JsonProperty("SubCategoryName", NullValueHandling = NullValueHandling.Ignore)]
        public string SubCategoryName { get; set; }

        //[JsonProperty("CategoryCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string CategoryCName { get; set; }

        [JsonProperty("CategoryName", NullValueHandling = NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        [JsonProperty("HomeTeamName", NullValueHandling = NullValueHandling.Ignore)]
        public string HomeTeamName { get; set; }

        [JsonProperty("AwayTeamName", NullValueHandling = NullValueHandling.Ignore)]
        public string AwayTeamName { get; set; }

        [JsonProperty("EventName", NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("Milliseconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? Milliseconds { get; set; }

        [JsonProperty("Date", NullValueHandling = NullValueHandling.Ignore)]
        public string Date { get; set; }

        [JsonProperty("Time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        [JsonProperty("MarketCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketCount { get; set; }

        [JsonProperty("Markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Markets { get; set; }

        [JsonProperty("CouponMarketId", NullValueHandling = NullValueHandling.Ignore)]
        public long? CouponMarketId { get; set; }

        [JsonProperty("FilterMarkets", NullValueHandling = NullValueHandling.Ignore)]
        public FilterMarkets FilterMarkets { get; set; }

        [JsonProperty("IsSuspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; }

        [JsonProperty("LiveStreamingMobileStatus")]
        public object LiveStreamingMobileStatus { get; set; }

        [JsonProperty("LiveStreamingProviderType")]
        public object LiveStreamingProviderType { get; set; }

        [JsonProperty("LiveStreamingDesktopStatus")]
        public object LiveStreamingDesktopStatus { get; set; }

        [JsonProperty("IsOutright", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOutright { get; set; }

        [JsonProperty("FeedId", NullValueHandling = NullValueHandling.Ignore)]
        public long? FeedId { get; set; }

        //[JsonProperty("SuperTournamentCName")]
        //public object SuperTournamentCName { get; set; }

        [JsonProperty("SuperTournamentName")]
        public object SuperTournamentName { get; set; }

        //[JsonProperty("MarketGroups", NullValueHandling = NullValueHandling.Ignore)]
        //public MarketGroups MarketGroups { get; set; }

        [JsonProperty("IsLive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLive { get; set; }

        [JsonProperty("IsPremium", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPremium { get; set; }

        //[JsonProperty("HomeTeamCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string HomeTeamCName { get; set; }

        //[JsonProperty("AwayTeamCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string AwayTeamCName { get; set; }

        //[JsonProperty("GroupCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string GroupCName { get; set; }

        //[JsonProperty("SubCategoryCName", NullValueHandling = NullValueHandling.Ignore)]
        //public string SubCategoryCName { get; set; }

        [JsonProperty("VenueTime")]
        public object VenueTime { get; set; }

        [JsonProperty("Venue", NullValueHandling = NullValueHandling.Ignore)]
        public string Venue { get; set; }

        [JsonProperty("Title")]
        public object Title { get; set; }

        [JsonProperty("IsLiveTraded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLiveTraded { get; set; }

        [JsonProperty("AmericanFormat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AmericanFormat { get; set; }

        [JsonProperty("NeutralVenue", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NeutralVenue { get; set; }

        //[JsonProperty("SurfaceCName")]
        //public object SurfaceCName { get; set; }

        [JsonProperty("SurfaceName", NullValueHandling = NullValueHandling.Ignore)]
        public string SurfaceName { get; set; }

        //[JsonProperty("SportVariationCName")]
        //public object SportVariationCName { get; set; }

        [JsonProperty("SportVariationName", NullValueHandling = NullValueHandling.Ignore)]
        public string SportVariationName { get; set; }

        [JsonProperty("SportsRadarId", NullValueHandling = NullValueHandling.Ignore)]
        public long? SportsRadarId { get; set; }

        [JsonProperty("IsVirtual", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [JsonProperty("IsBetBuilderSupported", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBetBuilderSupported { get; set; }
    }

    public partial class FilterMarkets
    {
        [JsonProperty("win-draw-win", NullValueHandling = NullValueHandling.Ignore)]
        public long? WinDrawWin { get; set; }
    }

    //public partial class MarketGroups
    //{
    //    [JsonProperty("main-markets", NullValueHandling = NullValueHandling.Ignore)]
    //    public Corners MainMarkets { get; set; }

    //    [JsonProperty("goals", NullValueHandling = NullValueHandling.Ignore)]
    //    public Corners Goals { get; set; }

    //    [JsonProperty("corners", NullValueHandling = NullValueHandling.Ignore)]
    //    public Corners Corners { get; set; }

    //    [JsonProperty("half", NullValueHandling = NullValueHandling.Ignore)]
    //    public Corners Half { get; set; }

    //    [JsonProperty("other", NullValueHandling = NullValueHandling.Ignore)]
    //    public Corners Other { get; set; }
    //}

    //public partial class Corners
    //{
    //    [JsonProperty("GroupName", NullValueHandling = NullValueHandling.Ignore)]
    //    public GroupName? GroupName { get; set; }

    //    [JsonProperty("MarketIds", NullValueHandling = NullValueHandling.Ignore)]
    //    public List<long> MarketIds { get; set; }
    //}

    public partial class Market
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("IsSuspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; }

        //[JsonProperty("Handicap", NullValueHandling = NullValueHandling.Ignore)]
        //public double? Handicap { get; set; }

        [JsonProperty("Headers")]
        public List<string> Headers { get; set; }

        [JsonProperty("Outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<long?>> Outcomes { get; set; }

        [JsonProperty("EventId", NullValueHandling = NullValueHandling.Ignore)]
        public long? EventId { get; set; }

        [JsonProperty("EachWayActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EachWayActive { get; set; }

        [JsonProperty("EachWayFractionDen", NullValueHandling = NullValueHandling.Ignore)]
        public long? EachWayFractionDen { get; set; }

        [JsonProperty("EachWayPosition", NullValueHandling = NullValueHandling.Ignore)]
        public long? EachWayPosition { get; set; }

        [JsonProperty("OutcomeGroups", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, OutcomeGroup> OutcomeGroups { get; set; }

        ////[JsonProperty("TypeCName", NullValueHandling = NullValueHandling.Ignore)]
        ////public string TypeCName { get; set; }

        [JsonProperty("TemplateId", NullValueHandling = NullValueHandling.Ignore)]
        public long? TemplateId { get; set; }

        ////[JsonProperty("MarketGroupCName", NullValueHandling = NullValueHandling.Ignore)]
        ////public MarketGroupCName? MarketGroupCName { get; set; }

        //[JsonProperty("MarketGroupName", NullValueHandling = NullValueHandling.Ignore)]
        //public GroupName? MarketGroupName { get; set; }

        [JsonProperty("CashOutActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CashOutActive { get; set; }

        [JsonProperty("FixedPriceAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FixedPriceAvailable { get; set; }

        [JsonProperty("StartingPriceAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StartingPriceAvailable { get; set; }

        [JsonProperty("AmericanFormat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AmericanFormat { get; set; }

        [JsonProperty("CouponHeaders")]
        public List<string> CouponHeaders { get; set; }

        [JsonProperty("SituationIndex")]
        public long? SituationIndex { get; set; }

        [JsonProperty("IsBetBuilderSupported", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBetBuilderSupported { get; set; }
    }

    public partial class OutcomeGroup
    {
        [JsonProperty("outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Outcomes { get; set; }
    }

    public partial class Outcome
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("IsDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDisplay { get; set; }

        [JsonProperty("IsActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

        [JsonProperty("OddsDecimal", NullValueHandling = NullValueHandling.Ignore)]
        public double? OddsDecimal { get; set; }

        [JsonProperty("OddsDecimalDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public string OddsDecimalDisplay { get; set; }

        [JsonProperty("OddsNum", NullValueHandling = NullValueHandling.Ignore)]
        public long? OddsNum { get; set; }

        [JsonProperty("OddsDen", NullValueHandling = NullValueHandling.Ignore)]
        public long? OddsDen { get; set; }

        [JsonProperty("EventId", NullValueHandling = NullValueHandling.Ignore)]
        public long? EventId { get; set; }

        [JsonProperty("MarketId", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketId { get; set; }

        [JsonProperty("ColumnId", NullValueHandling = NullValueHandling.Ignore)]
        public long? ColumnId { get; set; }

        [JsonProperty("RowId", NullValueHandling = NullValueHandling.Ignore)]
        public long? RowId { get; set; }

        //[JsonProperty("GroupCName")]
        //public object GroupCName { get; set; }

        [JsonProperty("BetName", NullValueHandling = NullValueHandling.Ignore)]
        public string BetName { get; set; }

        [JsonProperty("CouponName", NullValueHandling = NullValueHandling.Ignore)]
        public string CouponName { get; set; }

        //[JsonProperty("HandicapDisplay", NullValueHandling = NullValueHandling.Ignore)]
        //public HandicapDisplayUnion? HandicapDisplay { get; set; }

        //[JsonProperty("Handicap")]
        //public double? Handicap { get; set; }

        [JsonProperty("SortIndex", NullValueHandling = NullValueHandling.Ignore)]
        public long? SortIndex { get; set; }
    }

    public enum GroupName { Escanteios, Gols, MercadosPrincipais, Outro, PorTempos };

    public enum CouponHeader { Empate, LocalEEmpate, LocalEVisitante, MaisDe, MenosDe, Não, Sim, Visitado, Visitante, VisitanteEEmpate };

    public enum MarketGroupCName { Corners, Goals, Half, MainMarkets, Other };

    public enum HandicapDisplayEnum { Empty, The1, The105, The115, The2, The3, The35, The45, The55, The75, The85, The95 };

    public partial struct HandicapDisplayUnion
    {
        public HandicapDisplayEnum? Enum;
        public long? Integer;

        public static implicit operator HandicapDisplayUnion(HandicapDisplayEnum Enum) => new HandicapDisplayUnion { Enum = Enum };
        public static implicit operator HandicapDisplayUnion(long Integer) => new HandicapDisplayUnion { Integer = Integer };
    }

    public partial class ResponseDetalheDaPartida
    {
        public static ResponseDetalheDaPartida FromJson(string json) => JsonConvert.DeserializeObject<ResponseDetalheDaPartida>(json, RoboDeApostas.Models.CasasDeAposta.BetwayAPI.DetalheDaPartida.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ResponseDetalheDaPartida self) => JsonConvert.SerializeObject(self, RoboDeApostas.Models.CasasDeAposta.BetwayAPI.DetalheDaPartida.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GroupNameConverter.Singleton,
                CouponHeaderConverter.Singleton,
                MarketGroupCNameConverter.Singleton,
                HandicapDisplayUnionConverter.Singleton,
                HandicapDisplayEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GroupNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GroupName) || t == typeof(GroupName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Escanteios":
                    return GroupName.Escanteios;
                case "Gols":
                    return GroupName.Gols;
                case "Mercados Principais":
                    return GroupName.MercadosPrincipais;
                case "Outro":
                    return GroupName.Outro;
                case "Por tempos":
                    return GroupName.PorTempos;
            }
            throw new Exception("Cannot unmarshal type GroupName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GroupName)untypedValue;
            switch (value)
            {
                case GroupName.Escanteios:
                    serializer.Serialize(writer, "Escanteios");
                    return;
                case GroupName.Gols:
                    serializer.Serialize(writer, "Gols");
                    return;
                case GroupName.MercadosPrincipais:
                    serializer.Serialize(writer, "Mercados Principais");
                    return;
                case GroupName.Outro:
                    serializer.Serialize(writer, "Outro");
                    return;
                case GroupName.PorTempos:
                    serializer.Serialize(writer, "Por tempos");
                    return;
            }
            throw new Exception("Cannot marshal type GroupName");
        }

        public static readonly GroupNameConverter Singleton = new GroupNameConverter();
    }

    internal class CouponHeaderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CouponHeader) || t == typeof(CouponHeader?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Empate":
                    return CouponHeader.Empate;
                case "Local e Empate":
                    return CouponHeader.LocalEEmpate;
                case "Local e Visitante":
                    return CouponHeader.LocalEVisitante;
                case "Mais de ":
                    return CouponHeader.MaisDe;
                case "Menos de ":
                    return CouponHeader.MenosDe;
                case "Não":
                    return CouponHeader.Não;
                case "Sim":
                    return CouponHeader.Sim;
                case "Visitado":
                    return CouponHeader.Visitado;
                case "Visitante":
                    return CouponHeader.Visitante;
                case "Visitante e Empate":
                    return CouponHeader.VisitanteEEmpate;
            }
            throw new Exception("Cannot unmarshal type CouponHeader");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CouponHeader)untypedValue;
            switch (value)
            {
                case CouponHeader.Empate:
                    serializer.Serialize(writer, "Empate");
                    return;
                case CouponHeader.LocalEEmpate:
                    serializer.Serialize(writer, "Local e Empate");
                    return;
                case CouponHeader.LocalEVisitante:
                    serializer.Serialize(writer, "Local e Visitante");
                    return;
                case CouponHeader.MaisDe:
                    serializer.Serialize(writer, "Mais de ");
                    return;
                case CouponHeader.MenosDe:
                    serializer.Serialize(writer, "Menos de ");
                    return;
                case CouponHeader.Não:
                    serializer.Serialize(writer, "Não");
                    return;
                case CouponHeader.Sim:
                    serializer.Serialize(writer, "Sim");
                    return;
                case CouponHeader.Visitado:
                    serializer.Serialize(writer, "Visitado");
                    return;
                case CouponHeader.Visitante:
                    serializer.Serialize(writer, "Visitante");
                    return;
                case CouponHeader.VisitanteEEmpate:
                    serializer.Serialize(writer, "Visitante e Empate");
                    return;
            }
            throw new Exception("Cannot marshal type CouponHeader");
        }

        public static readonly CouponHeaderConverter Singleton = new CouponHeaderConverter();
    }

    internal class MarketGroupCNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MarketGroupCName) || t == typeof(MarketGroupCName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "corners":
                    return MarketGroupCName.Corners;
                case "goals":
                    return MarketGroupCName.Goals;
                case "half":
                    return MarketGroupCName.Half;
                case "main-markets":
                    return MarketGroupCName.MainMarkets;
                case "other":
                    return MarketGroupCName.Other;
            }
            throw new Exception("Cannot unmarshal type MarketGroupCName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MarketGroupCName)untypedValue;
            switch (value)
            {
                case MarketGroupCName.Corners:
                    serializer.Serialize(writer, "corners");
                    return;
                case MarketGroupCName.Goals:
                    serializer.Serialize(writer, "goals");
                    return;
                case MarketGroupCName.Half:
                    serializer.Serialize(writer, "half");
                    return;
                case MarketGroupCName.MainMarkets:
                    serializer.Serialize(writer, "main-markets");
                    return;
                case MarketGroupCName.Other:
                    serializer.Serialize(writer, "other");
                    return;
            }
            throw new Exception("Cannot marshal type MarketGroupCName");
        }

        public static readonly MarketGroupCNameConverter Singleton = new MarketGroupCNameConverter();
    }

    internal class HandicapDisplayUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HandicapDisplayUnion) || t == typeof(HandicapDisplayUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.Empty };
                        case "+1":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The1 };
                        case "+2":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The2 };
                        case "+3":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The3 };
                        case "10.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The105 };
                        case "11.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The115 };
                        case "3.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The35 };
                        case "4.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The45 };
                        case "5.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The55 };
                        case "7.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The75 };
                        case "8.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The85 };
                        case "9.5":
                            return new HandicapDisplayUnion { Enum = HandicapDisplayEnum.The95 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new HandicapDisplayUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type HandicapDisplayUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (HandicapDisplayUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case HandicapDisplayEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case HandicapDisplayEnum.The1:
                        serializer.Serialize(writer, "+1");
                        return;
                    case HandicapDisplayEnum.The2:
                        serializer.Serialize(writer, "+2");
                        return;
                    case HandicapDisplayEnum.The3:
                        serializer.Serialize(writer, "+3");
                        return;
                    case HandicapDisplayEnum.The105:
                        serializer.Serialize(writer, "10.5");
                        return;
                    case HandicapDisplayEnum.The115:
                        serializer.Serialize(writer, "11.5");
                        return;
                    case HandicapDisplayEnum.The35:
                        serializer.Serialize(writer, "3.5");
                        return;
                    case HandicapDisplayEnum.The45:
                        serializer.Serialize(writer, "4.5");
                        return;
                    case HandicapDisplayEnum.The55:
                        serializer.Serialize(writer, "5.5");
                        return;
                    case HandicapDisplayEnum.The75:
                        serializer.Serialize(writer, "7.5");
                        return;
                    case HandicapDisplayEnum.The85:
                        serializer.Serialize(writer, "8.5");
                        return;
                    case HandicapDisplayEnum.The95:
                        serializer.Serialize(writer, "9.5");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type HandicapDisplayUnion");
        }

        public static readonly HandicapDisplayUnionConverter Singleton = new HandicapDisplayUnionConverter();
    }

    internal class HandicapDisplayEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HandicapDisplayEnum) || t == typeof(HandicapDisplayEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return HandicapDisplayEnum.Empty;
                case "+1":
                    return HandicapDisplayEnum.The1;
                case "+2":
                    return HandicapDisplayEnum.The2;
                case "+3":
                    return HandicapDisplayEnum.The3;
                case "10.5":
                    return HandicapDisplayEnum.The105;
                case "11.5":
                    return HandicapDisplayEnum.The115;
                case "3.5":
                    return HandicapDisplayEnum.The35;
                case "4.5":
                    return HandicapDisplayEnum.The45;
                case "5.5":
                    return HandicapDisplayEnum.The55;
                case "7.5":
                    return HandicapDisplayEnum.The75;
                case "8.5":
                    return HandicapDisplayEnum.The85;
                case "9.5":
                    return HandicapDisplayEnum.The95;
            }
            throw new Exception("Cannot unmarshal type HandicapDisplayEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HandicapDisplayEnum)untypedValue;
            switch (value)
            {
                case HandicapDisplayEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case HandicapDisplayEnum.The1:
                    serializer.Serialize(writer, "+1");
                    return;
                case HandicapDisplayEnum.The2:
                    serializer.Serialize(writer, "+2");
                    return;
                case HandicapDisplayEnum.The3:
                    serializer.Serialize(writer, "+3");
                    return;
                case HandicapDisplayEnum.The105:
                    serializer.Serialize(writer, "10.5");
                    return;
                case HandicapDisplayEnum.The115:
                    serializer.Serialize(writer, "11.5");
                    return;
                case HandicapDisplayEnum.The35:
                    serializer.Serialize(writer, "3.5");
                    return;
                case HandicapDisplayEnum.The45:
                    serializer.Serialize(writer, "4.5");
                    return;
                case HandicapDisplayEnum.The55:
                    serializer.Serialize(writer, "5.5");
                    return;
                case HandicapDisplayEnum.The75:
                    serializer.Serialize(writer, "7.5");
                    return;
                case HandicapDisplayEnum.The85:
                    serializer.Serialize(writer, "8.5");
                    return;
                case HandicapDisplayEnum.The95:
                    serializer.Serialize(writer, "9.5");
                    return;
            }
            throw new Exception("Cannot marshal type HandicapDisplayEnum");
        }

        public static readonly HandicapDisplayEnumConverter Singleton = new HandicapDisplayEnumConverter();
    }
}
