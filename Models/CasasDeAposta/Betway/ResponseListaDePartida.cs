// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RoboDeApostas.Models.CasasDeAposta.Betway.ListaDePartida;
//
//    var responseListaDePartida = ListaDePartida.FromJsonList(jsonString);

namespace RoboDeApostas.Models.CasasDeAposta.BetwayAPI.ListaDePartida
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ResponseListaDePartida
    {
        [JsonProperty("Events", NullValueHandling = NullValueHandling.Ignore)]
        public List<Event> Events { get; set; }

        [JsonProperty("Markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<Market> Markets { get; set; }

        [JsonProperty("Outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Outcome> Outcomes { get; set; }

        [JsonProperty("Scoreboards", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Scoreboards { get; set; }

        [JsonProperty("MethodName", NullValueHandling = NullValueHandling.Ignore)]
        public string MethodName { get; set; }

        [JsonProperty("MethodResult", NullValueHandling = NullValueHandling.Ignore)]
        public string MethodResult { get; set; }

        [JsonProperty("Success", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [JsonProperty("CorrelationId", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? CorrelationId { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("GroupName", NullValueHandling = NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [JsonProperty("SubCategoryName", NullValueHandling = NullValueHandling.Ignore)]
        public string SubCategoryName { get; set; }

        [JsonProperty("CategoryCName", NullValueHandling = NullValueHandling.Ignore)]
        public string CategoryCName { get; set; }

        [JsonProperty("CategoryName", NullValueHandling = NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        [JsonProperty("HomeTeamName")]
        public string HomeTeamName { get; set; }

        [JsonProperty("AwayTeamName")]
        public string AwayTeamName { get; set; }

        [JsonProperty("EventName", NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("Milliseconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? Milliseconds { get; set; }

        [JsonProperty("Date", NullValueHandling = NullValueHandling.Ignore)]
        public string Date { get; set; }

        [JsonProperty("Time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        [JsonProperty("MarketCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketCount { get; set; }

        [JsonProperty("Markets", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Markets { get; set; }

        [JsonProperty("CouponMarketId")]
        public long? CouponMarketId { get; set; }

        [JsonProperty("FilterMarkets", NullValueHandling = NullValueHandling.Ignore)]
        public FilterMarkets FilterMarkets { get; set; }

        [JsonProperty("IsSuspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; }

        [JsonProperty("LiveStreamingMobileStatus")]
        public object LiveStreamingMobileStatus { get; set; }

        [JsonProperty("LiveStreamingProviderType")]
        public object LiveStreamingProviderType { get; set; }

        [JsonProperty("LiveStreamingDesktopStatus")]
        public object LiveStreamingDesktopStatus { get; set; }

        [JsonProperty("IsOutright", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOutright { get; set; }

        [JsonProperty("FeedId")]
        public long? FeedId { get; set; }

        [JsonProperty("SuperTournamentCName")]
        public object SuperTournamentCName { get; set; }

        [JsonProperty("SuperTournamentName")]
        public object SuperTournamentName { get; set; }

        [JsonProperty("MarketGroups", NullValueHandling = NullValueHandling.Ignore)]
        public MarketGroups MarketGroups { get; set; }

        [JsonProperty("IsLive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLive { get; set; }

        [JsonProperty("IsPremium", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPremium { get; set; }

        [JsonProperty("HomeTeamCName")]
        public string HomeTeamCName { get; set; }

        [JsonProperty("AwayTeamCName")]
        public string AwayTeamCName { get; set; }

        [JsonProperty("GroupCName", NullValueHandling = NullValueHandling.Ignore)]
        public string GroupCName { get; set; }

        [JsonProperty("SubCategoryCName", NullValueHandling = NullValueHandling.Ignore)]
        public string SubCategoryCName { get; set; }

        [JsonProperty("VenueTime")]
        public object VenueTime { get; set; }

        [JsonProperty("Venue", NullValueHandling = NullValueHandling.Ignore)]
        public string Venue { get; set; }

        [JsonProperty("Title")]
        public object Title { get; set; }

        [JsonProperty("IsLiveTraded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLiveTraded { get; set; }

        [JsonProperty("AmericanFormat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AmericanFormat { get; set; }

        [JsonProperty("NeutralVenue", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NeutralVenue { get; set; }

        [JsonProperty("SurfaceCName")]
        public object SurfaceCName { get; set; }

        [JsonProperty("SurfaceName", NullValueHandling = NullValueHandling.Ignore)]
        public string SurfaceName { get; set; }

        [JsonProperty("SportVariationCName")]
        public object SportVariationCName { get; set; }

        [JsonProperty("SportVariationName", NullValueHandling = NullValueHandling.Ignore)]
        public string SportVariationName { get; set; }

        [JsonProperty("SportsRadarId")]
        public long? SportsRadarId { get; set; }

        [JsonProperty("IsVirtual", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [JsonProperty("IsBetBuilderSupported", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBetBuilderSupported { get; set; }
    }

    public partial class FilterMarkets
    {
        [JsonProperty("win-draw-win", NullValueHandling = NullValueHandling.Ignore)]
        public long? WinDrawWin { get; set; }
    }

    public partial class MarketGroups
    {
        [JsonProperty("main-markets", NullValueHandling = NullValueHandling.Ignore)]
        public MainMarkets MainMarkets { get; set; }
    }

    public partial class MainMarkets
    {
        [JsonProperty("GroupName", NullValueHandling = NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [JsonProperty("MarketIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> MarketIds { get; set; }
    }

    public partial class Market
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("IsSuspended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; }

        [JsonProperty("Handicap", NullValueHandling = NullValueHandling.Ignore)]
        public long? Handicap { get; set; }

        [JsonProperty("Headers", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Headers { get; set; }

        [JsonProperty("Outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<long>> Outcomes { get; set; }

        [JsonProperty("EventId", NullValueHandling = NullValueHandling.Ignore)]
        public long? EventId { get; set; }

        [JsonProperty("EachWayActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EachWayActive { get; set; }

        [JsonProperty("EachWayFractionDen", NullValueHandling = NullValueHandling.Ignore)]
        public long? EachWayFractionDen { get; set; }

        [JsonProperty("EachWayPosition", NullValueHandling = NullValueHandling.Ignore)]
        public long? EachWayPosition { get; set; }

        [JsonProperty("OutcomeGroups", NullValueHandling = NullValueHandling.Ignore)]
        public OutcomeGroups OutcomeGroups { get; set; }

        [JsonProperty("TypeCName", NullValueHandling = NullValueHandling.Ignore)]
        public string TypeCName { get; set; }

        [JsonProperty("TemplateId", NullValueHandling = NullValueHandling.Ignore)]
        public long? TemplateId { get; set; }

        [JsonProperty("MarketGroupCName", NullValueHandling = NullValueHandling.Ignore)]
        public string MarketGroupCName { get; set; }

        [JsonProperty("MarketGroupName", NullValueHandling = NullValueHandling.Ignore)]
        public string MarketGroupName { get; set; }

        [JsonProperty("CashOutActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CashOutActive { get; set; }

        [JsonProperty("FixedPriceAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FixedPriceAvailable { get; set; }

        [JsonProperty("StartingPriceAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StartingPriceAvailable { get; set; }

        [JsonProperty("AmericanFormat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AmericanFormat { get; set; }

        [JsonProperty("CouponHeaders", NullValueHandling = NullValueHandling.Ignore)]
        public List<Coupon> CouponHeaders { get; set; }

        [JsonProperty("SituationIndex")]
        public object SituationIndex { get; set; }

        [JsonProperty("IsBetBuilderSupported", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBetBuilderSupported { get; set; }
    }

    public partial class OutcomeGroups
    {
        [JsonProperty("home", NullValueHandling = NullValueHandling.Ignore)]
        public Away Home { get; set; }

        [JsonProperty("draw", NullValueHandling = NullValueHandling.Ignore)]
        public Away Draw { get; set; }

        [JsonProperty("away", NullValueHandling = NullValueHandling.Ignore)]
        public Away Away { get; set; }
    }

    public partial class Away
    {
        [JsonProperty("outcomes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Outcomes { get; set; }
    }

    public partial class Outcome
    {
        [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("IsDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDisplay { get; set; }

        [JsonProperty("IsActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

        [JsonProperty("OddsDecimal", NullValueHandling = NullValueHandling.Ignore)]
        public double? OddsDecimal { get; set; }

        [JsonProperty("OddsDecimalDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public string OddsDecimalDisplay { get; set; }

        [JsonProperty("OddsNum", NullValueHandling = NullValueHandling.Ignore)]
        public long? OddsNum { get; set; }

        [JsonProperty("OddsDen", NullValueHandling = NullValueHandling.Ignore)]
        public long? OddsDen { get; set; }

        [JsonProperty("EventId", NullValueHandling = NullValueHandling.Ignore)]
        public long? EventId { get; set; }

        [JsonProperty("MarketId", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketId { get; set; }

        [JsonProperty("ColumnId", NullValueHandling = NullValueHandling.Ignore)]
        public long? ColumnId { get; set; }

        [JsonProperty("RowId", NullValueHandling = NullValueHandling.Ignore)]
        public long? RowId { get; set; }

        [JsonProperty("GroupCName")]
        public object GroupCName { get; set; }

        [JsonProperty("BetName", NullValueHandling = NullValueHandling.Ignore)]
        public string BetName { get; set; }

        [JsonProperty("CouponName", NullValueHandling = NullValueHandling.Ignore)]
        public Coupon? CouponName { get; set; }

        [JsonProperty("HandicapDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public string HandicapDisplay { get; set; }

        [JsonProperty("Handicap")]
        public object Handicap { get; set; }

        [JsonProperty("SortIndex", NullValueHandling = NullValueHandling.Ignore)]
        public long? SortIndex { get; set; }
    }

    public enum Coupon { Empate, Visitado, Visitante };

    public partial class ResponseListaDePartida
    {
        public static ResponseListaDePartida FromJson(string json) => JsonConvert.DeserializeObject<ResponseListaDePartida>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ResponseListaDePartida self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CouponConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CouponConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Coupon) || t == typeof(Coupon?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Empate":
                    return Coupon.Empate;
                case "Visitado":
                    return Coupon.Visitado;
                case "Visitante":
                    return Coupon.Visitante;
            }
            throw new Exception("Cannot unmarshal type Coupon");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Coupon)untypedValue;
            switch (value)
            {
                case Coupon.Empate:
                    serializer.Serialize(writer, "Empate");
                    return;
                case Coupon.Visitado:
                    serializer.Serialize(writer, "Visitado");
                    return;
                case Coupon.Visitante:
                    serializer.Serialize(writer, "Visitante");
                    return;
            }
            throw new Exception("Cannot marshal type Coupon");
        }

        public static readonly CouponConverter Singleton = new CouponConverter();
    }
}
