@page "/robo"
@inject IToastService toastService
@inherits ComponentBase
@inject DatabaseContext context
<PageTitle>Robôs</PageTitle>
<h4>Robôs em execução: @RobosEmExecucao.Count</h4>
<ul>
    @foreach (CasaDeAposta robo in RobosEmExecucao)
    {
        <li>@robo.NomeDoSite - @robo.LigaEmExecucao</li>
    }
</ul>
<hr />

<div class="row justify-content-between">
    <div class="col-3">
        <input type="search" placeholder="Pesquisar" @bind="this.textoDePesquisa" />
    </div>
    <div class="col-2">
        <button class="btn btn-primary" @onclick="@this.ExecutarTodosOsRobosParalelamente">Executar todos - Paralelamente</button>
    </div>
    <div class="col-2">
        <button class="btn btn-primary" @onclick="@this.ExecutarTodosOsRobosEmSerie">Executar todos - Em série</button>
    </div>
    <div class="col-3">
        <span>Executar com navegador aberto</span>
        <Input type="checkbox" value="@AbrirNavegador" @onchange="(e) => { AbrirNavegador = (bool)e.Value;} " />
    </div>
</div>
<div class="row">
    <span>Executar todas as ligas: </span>
    <div style="display:flex; flex-direction: row; gap: 10x; flex-wrap: wrap, width: 100%">
        @foreach (CasaDeAposta casa in casas)
        {
            <button class="btn btn-primary" style="margin: 5px" @onclick="async () => await this.ExecutarDeTodasAsLigas(casa.NomeDoSite)">@casa.NomeDoSite</button>
        }
    </div>
</div>
<table class="table" style="width: 100%">
    <thead>
        <tr>
            <th scope="col">Casa de aposta</th>
            <th scope="col">Liga</th>
            <th scope="col">Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (LinkDaLiga link in this.links.Where(l => l.CasaDeAposta.ToLower().Contains(this.textoDePesquisa.ToLower()) || l.Liga.Nome.ToLower().Contains(textoDePesquisa.ToLower())))
        {
            <tr>
                <td>@link.CasaDeAposta</td>
                <td>@link.Liga.Nome</td>
                <td><button class="btn btn-primary" @onclick="async () => await this.ExecutarRobo(link.CasaDeAposta, link.Liga.Nome, link.Link)">Executar robô</button></td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<LinkDaLiga> links;
    private string textoDePesquisa = "";
    private static List<CasaDeAposta> RobosEmExecucao = new();
    [CascadingParameter]
    List<CasaDeAposta> casas { get; set; }
    private static bool AbrirNavegador { get => CasaDeAposta.AbrirNavegador; set { CasaDeAposta.AbrirNavegador = value; } }
    protected override void OnInitialized()
    {
        this.links = context.LinkDaLiga.Include(l => l.Liga).ToList();
    }

    public async Task ExecutarRobo(string casaDeAposta, string liga, string link)
    {
        if (RobosEmExecucao.Exists(c => c.NomeDoSite == casaDeAposta/* && c.LigaEmExecucao == liga*/))
            toastService.ShowError("Já existe uma execução para essa casa de aposta, aguarde finalizar");
        else
            foreach (CasaDeAposta casa in casas)
                if (casaDeAposta == casa.NomeDoSite)
                {
                    try
                    {
                        string robo = $"{casa.NomeDoSite} - {liga}";
                        casa.LigaEmExecucao = liga;
                        RobosEmExecucao.Add(casa);
                        await casa.RodarPadraoAsync(link);
                    }
                    catch (System.Exception e)
                    {
                        toastService.ShowError(e.Message);
                    }
                    finally
                    {
                        RobosEmExecucao.Remove(casa);
                    }
                }
    }

    public async Task ExecutarTodosOsRobosParalelamente()
    {
        List<Task> tarefas = new();
        foreach (CasaDeAposta casa in casas)
            tarefas.Add(Task.Run(async () =>
            {
                try
                {
                    RobosEmExecucao.Add(casa);
                    await casa.RodarPadraoAsync();
                }
                catch (System.Exception e)
                {
                    toastService.ShowError(e.Message);
                }
                finally
                {
                    RobosEmExecucao.Remove(casa);
                }
            }));

        await Task.WhenAll(tarefas);
    }

    public async Task ExecutarTodosOsRobosEmSerie()
    {
        List<Task> tarefas = new();
        foreach (CasaDeAposta casa in casas)
        {
            try
            {
                RobosEmExecucao.Add(casa);
                await casa.RodarPadraoAsync();
            }
            catch (System.Exception e)
            {
                toastService.ShowError(e.Message);
            }
            finally
            {
                RobosEmExecucao.Remove(casa);
            }
        };

    }

    public async Task ExecutarDeTodasAsLigas(string nomeDaCasa)
    {
        CasaDeAposta? casa = casas.Find(c => c.NomeDoSite == nomeDaCasa);
        if (casa == null)
        {
            toastService.ShowInfo($"Nenhuma casa de aposta foi encontrada com este nome {nomeDaCasa}");
            return;
        }
        try
        {
            RobosEmExecucao.Add(casa);
            await casa.RodarPadraoAsync();
        }
        catch (System.Exception e)
        {
            toastService.ShowError(e.Message);
        }
        finally
        {
            RobosEmExecucao.Remove(casa);
        }
    }
}
